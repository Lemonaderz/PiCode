#1.0.0vent
import sys

# ruff: noqa: E402
sys.path.append("")

from micropython import const

import asyncio
import aioble
import bluetooth
from machine import Pin
import machine
import time
import random
import struct

# org.bluetooth.service.environmental_sensing
_ENV_SENSE_UUID = bluetooth.UUID(0x181A)
# org.bluetooth.characteristic.temperature
_ENV_SENSE_TEMP_UUID = bluetooth.UUID(0x2A6E)
# org.bluetooth.characteristic.gap.appearance.xml
_APPEARANCE_GENERIC_CONTROL = const(0x00)

_PUMP_SERVICE_UUID = bluetooth.UUID("00000001-710e-4a5b-8d75-3e5b444bc3cf")
_SPEED_CHARACTERISTIC_UUID = bluetooth.UUID("00000003-710e-4a5b-8d75-3e5b444bc3cf")
_STRENGTH_CHARACTERISTIC_UUID = bluetooth.UUID("00000004-710e-4a5b-8d75-3e5b444bc3cf")
_TEMP_CHARACTERISTIC_UUID = bluetooth.UUID("00000002-710e-4a5b-8d75-3e5b444bc3cf")
# How frequently to send advertising beacons.
_ADV_INTERVAL_MS = 250_000


# Register GATT server.

    
pump_service = aioble.Service(_PUMP_SERVICE_UUID)
speed_characteristic = aioble.Characteristic(
    pump_service, _SPEED_CHARACTERISTIC_UUID, write=True, notify=True
)
strength_characteristic = aioble.Characteristic( pump_service, _STRENGTH_CHARACTERISTIC_UUID, write=True, notify = True)
temp_characteristic = aioble.Characteristic (pump_service, _TEMP_CHARACTERISTIC_UUID, read = True, notify = True)

aioble.register_services(pump_service)


# Helper to encode the temperature characteristic encoding (sint16, hundredths of a degree).

speed = 0
strength = 0
change_in_data = False
led = machine.Pin("LED", machine.Pin.OUT)
ENA_PIN = machine.Pin(5, machine.Pin.OUT)
IN1_PIN = machine.Pin(4, machine.Pin.OUT)
IN2_PIN = machine.Pin(3, machine.Pin.OUT)
ENA_PIN.on()

# This would be periodically polling a hardware sensor.
async def run_pump():
    global speed, strength, change_in_data
    print("Running pump")
    change_in_data = False
    speed = 0
    while True:

        if speed == 255:
            print("restarting")	
            speed = 0
            IN1_PIN.off()
            IN2_PIN.on()
            led.off()
            del speed
            del strength
            del change_in_data
            machine.reset()
            await asyncio.sleep(1)
            
            
            

        if speed > 0 and speed < 255:
            print("Doing Something")
            if speed == 255:
                speed = 0
            if speed > 20:
                speed = 20;
            modifier = strength
            IN1_PIN.on()
            IN2_PIN.off()
            led.on()
            await asyncio.sleep(1.5 - 0.5 * modifier) 
            IN1_PIN.off()
            IN2_PIN.on()
            led.off()
            await asyncio.sleep(1.5 - 0.5 * modifier)
            if speed == 0 or speed == 255:
                IN1_PIN.off()
                IN2_PIN.on()
                led.off();

        
            else:            
                await asyncio.sleep((60/speed) - (3 - 1*modifier))
        else:
            IN1_PIN.off()
            IN2_PIN.on()
            led.off()
            
            await asyncio.sleep(1)

   


    
                
    
async def speed_task():
    global speed, change_in_data
    while True:
        await speed_characteristic.written()
        print("Data given")
        print(speed_characteristic.read()[0])
        speed = speed_characteristic.read()[0]
        change_in_data = True
    
async def strength_task():
    global strength, change_in_data
    while True:
        await strength_characteristic.written()
        print("Strength Given")
        print(strength_characteristic.read()[0])
        strength = strength_characteristic.read()[0]
        change_in_data = True


# Serially wait for connections. Don't advertise while a central is
# connected.
async def peripheral_task():
    while True:
        async with await aioble.advertise(
            _ADV_INTERVAL_MS,
            name="Thermometer",
            services=[_PUMP_SERVICE_UUID],
            appearance=_APPEARANCE_GENERIC_CONTROL,
        ) as connection:
            
            print("Connection from", connection.device)
            
            await connection.disconnected(timeout_ms=None)




# Run both tasks.
async def main():
    t1 = asyncio.create_task(speed_task())
    t2 = asyncio.create_task(peripheral_task())
    t3 = asyncio.create_task(strength_task())
    t4 = asyncio.create_task(run_pump())
    await asyncio.gather(t1, t2, t3, t4)

asyncio.run(main())
